#!/bin/sh
#|-*- mode:lisp -*-|#
#| A linter for Common Lisp source code using SBCL
exec ros -Q -- $0 "$@"
|#
#-sbcl
(error "SBLint requires SBCL. Make sure it is installed with `ros install sbcl' and use it with `ros use sbcl'.")

(progn ;;init forms
  (ql:quickload '(#:sblint #:uiop) :silent t))

(defpackage #:ros.script.sblint
  (:use #:cl)
  (:import-from #:sblint
                #:run-lint-file
                #:run-lint-directory)
  (:import-from #:uiop
                #:quit
                #:directory-files
                #:truename*
                #:file-pathname-p))
(in-package :ros.script.sblint)

(defun print-error (format-control &rest format-arguments)
  (fresh-line *error-output*)
  (apply #'format *error-output* format-control format-arguments)
  (fresh-line *error-output*)
  (uiop:quit -1))

(defun print-usage ()
  (print-error
   "SBLint v~A.
Usage:
    $ sblint # runs on all ASD files in current directory
    $ sblint [directories or files...]"
   (asdf:component-version (asdf:find-system :sblint))))

(defun stack ()
  (loop for frame = (sb-di:frame-down (sb-di:top-frame)) then (sb-di:frame-down frame)
        while frame
        collect frame))

(defun main (&rest argv)
  (when (or (equal (first argv) "-h")
            (equal (first argv) "--help"))
    (print-usage))

  (when (or (equal (first argv) "-v")
            (equal (first argv) "--verbose"))
    (setf sblint:*enable-logger* t)
    (pop argv))

  (unless argv
    (setf argv (list *default-pathname-defaults*)))

  (dolist (arg argv)
    (let ((target (uiop:truename* arg)))
      (unless target
        (print-error "No such file or directory: '~A'" arg))

      (let ((stream *error-output*))
        (handler-bind ((error
                         (lambda (e)
                           (format stream "~&[ERROR] ~A: ~A~2%Backtraces:~%"
                                   (type-of e)
                                   e)
                           (dolist (frame (stack))
                             (format stream "~&  [~D] ~S~%"
                                     (sb-di:frame-number frame)
                                     (sb-di:debug-fun-name (sb-di:frame-debug-fun frame)))))))
          (handler-case
              (if (uiop:file-pathname-p target)
                  (run-lint-file target)
                  (run-lint-directory target))
            (sblint:sblint-error (e)
              (print-error "~A" e))))))))

;;; vim: set ft=lisp lisp:
